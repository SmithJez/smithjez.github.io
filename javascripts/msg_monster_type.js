/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.msggamedata.MonsterEvolution');
goog.provide('proto.msggamedata.MonsterStatType');
goog.provide('proto.msggamedata.MonsterStatWeightType');
goog.provide('proto.msggamedata.MsgMonsterType');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * @enum {number}
 */
proto.msggamedata.MonsterStatType = {
  MS_NONE: 0,
  MS_ATTACK: 1,
  MS_DEFENCE: 2,
  MS_HEAL: 3,
  MS_BALANCE: 4,
  MS_HP: 5
};

/**
 * @enum {number}
 */
proto.msggamedata.MonsterStatWeightType = {
  MONSTERSTATWEIGHTTYPENULL: 0,
  MS_NORMAL: 1,
  MS_SPECIAL: 2
};

/**
 * @enum {number}
 */
proto.msggamedata.MonsterEvolution = {
  MONSTEREVOLUTIONNULL: 0,
  ME_1: 1,
  ME_2: 2,
  ME_3: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msggamedata.MsgMonsterType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msggamedata.MsgMonsterType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msggamedata.MsgMonsterType.displayName = 'proto.msggamedata.MsgMonsterType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msggamedata.MsgMonsterType.prototype.toObject = function(opt_includeInstance) {
  return proto.msggamedata.MsgMonsterType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msggamedata.MsgMonsterType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msggamedata.MsgMonsterType.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    weightType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    attackWeight: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    defenceWeight: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    healWeight: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    hpWeight: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    evolution: jspb.Message.getFieldWithDefault(msg, 11, 0),
    probWeight: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    sp: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msggamedata.MsgMonsterType}
 */
proto.msggamedata.MsgMonsterType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msggamedata.MsgMonsterType;
  return proto.msggamedata.MsgMonsterType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msggamedata.MsgMonsterType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msggamedata.MsgMonsterType}
 */
proto.msggamedata.MsgMonsterType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.msggamedata.MonsterStatType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!proto.msggamedata.MonsterStatWeightType} */ (reader.readEnum());
      msg.setWeightType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAttackWeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDefenceWeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHealWeight(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHpWeight(value);
      break;
    case 11:
      var value = /** @type {!proto.msggamedata.MonsterEvolution} */ (reader.readEnum());
      msg.setEvolution(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProbWeight(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msggamedata.MsgMonsterType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msggamedata.MsgMonsterType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msggamedata.MsgMonsterType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msggamedata.MsgMonsterType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getWeightType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAttackWeight();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getDefenceWeight();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getHealWeight();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getHpWeight();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getEvolution();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getProbWeight();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getSp();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
};


/**
 * optional MonsterStatType type = 1;
 * @return {!proto.msggamedata.MonsterStatType}
 */
proto.msggamedata.MsgMonsterType.prototype.getType = function() {
  return /** @type {!proto.msggamedata.MonsterStatType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.msggamedata.MonsterStatType} value */
proto.msggamedata.MsgMonsterType.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional MonsterStatWeightType weight_type = 2;
 * @return {!proto.msggamedata.MonsterStatWeightType}
 */
proto.msggamedata.MsgMonsterType.prototype.getWeightType = function() {
  return /** @type {!proto.msggamedata.MonsterStatWeightType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.msggamedata.MonsterStatWeightType} value */
proto.msggamedata.MsgMonsterType.prototype.setWeightType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float attack_weight = 3;
 * @return {number}
 */
proto.msggamedata.MsgMonsterType.prototype.getAttackWeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.msggamedata.MsgMonsterType.prototype.setAttackWeight = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float defence_weight = 4;
 * @return {number}
 */
proto.msggamedata.MsgMonsterType.prototype.getDefenceWeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.msggamedata.MsgMonsterType.prototype.setDefenceWeight = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional float heal_weight = 5;
 * @return {number}
 */
proto.msggamedata.MsgMonsterType.prototype.getHealWeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.msggamedata.MsgMonsterType.prototype.setHealWeight = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional float hp_weight = 6;
 * @return {number}
 */
proto.msggamedata.MsgMonsterType.prototype.getHpWeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.msggamedata.MsgMonsterType.prototype.setHpWeight = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional MonsterEvolution evolution = 11;
 * @return {!proto.msggamedata.MonsterEvolution}
 */
proto.msggamedata.MsgMonsterType.prototype.getEvolution = function() {
  return /** @type {!proto.msggamedata.MonsterEvolution} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.msggamedata.MonsterEvolution} value */
proto.msggamedata.MsgMonsterType.prototype.setEvolution = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional float prob_weight = 12;
 * @return {number}
 */
proto.msggamedata.MsgMonsterType.prototype.getProbWeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.msggamedata.MsgMonsterType.prototype.setProbWeight = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional uint32 sp = 13;
 * @return {number}
 */
proto.msggamedata.MsgMonsterType.prototype.getSp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.msggamedata.MsgMonsterType.prototype.setSp = function(value) {
  jspb.Message.setField(this, 13, value);
};


